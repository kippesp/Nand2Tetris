// The original Jack JVM compiler as well as my 11v2 compiler will fail
// the first test_if_1() test.  Since I wanted to achieve operational
// parity and not correctness of the Jack Language Spec for the 11v2
// project the failure is by definition correct.
// 
// It can be noted that 11v2 generates VM when run on the newer web version
// of the Jack tools--the VM simulator, the results all show passing.
//
// For project 13, since there is not reference that compiler when targeting
// the LLVM backends conforms to the Jack Language Spec.  The results
// pass for these targets.
//
// Update 7/30/2025 - Parity with the reference Jack compiler was causing
// issues with the Project 13 effort.  I decided to add better support in
// 11v2 to detect these patterns, which are undefined behavior.  A closer
// reading of the N2T textbook, does specify which operators are for which
// data type, but it doesn't specify if the program gets it wrong.  The
// textbook also seems unclear on the IF and WHILE statements (the
// conditional).  The added warnings will provide a message if the statement
// doesn't resolve to a boolean.
//
// This test program will run with the two various results on each reference
// compiler (i.e. Java and web).  With the warnings resolved, each compiler
// will produce compatible programs.

class Main {
  function int test_while() {
    var int idx, count;

    let count = 100;
    let idx = 0;

    while (~idx)
    {
      let count = count - 1;
      let idx = idx + 1;
    }

    do Output.println();
    return count;
  }

  function void test_if_1() {
    if (5)
    {
      if (0)
      {
        do Output.printString("IF1 TT fail");
      }
      else
      {
        do Output.printString("IF1 TF fail");
      }
    }
    else
    {
      if (~0)
      {
        do Output.printString("IF1 FT pass");
      }
      else
      {
        do Output.printString("IF1 FF fail");
      }
    }

    do Output.println();
    return;
  }


  function void test_if_2() {
    if (5 = 0)
    {
      if (0 = 1)
      {
        do Output.printString("IF2 TT fail");
      }
      else
      {
        do Output.printString("IF2 TF fail");
      }
    }
    else
    {
      if (~0 = ~0)
      {
        do Output.printString("IF2 FT pass");
      }
      else
      {
        do Output.printString("IF2 FF fail");
      }
    }

    do Output.println();
    return;
  }

  function void main() {
    var int rvalue;

    let rvalue = Main.test_while();

    if (rvalue = 99)
    {
      do Output.printString("WHILE pass: ");
      do Output.printInt(rvalue);
    }
    else
    {
      do Output.printString("WHILE fail: ");
      do Output.printInt(rvalue);
    }

    do Output.println();
    do Main.test_if_1();
    do Main.test_if_2();

    return;
  }
}
