// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bitmask;

    /** Initializes the library. */
    function void init() {
      let bitmask = Array.new(16);
      let bitmask[0] = 1;
      let bitmask[1] = 2;
      let bitmask[2] = 4;
      let bitmask[3] = 8;
      let bitmask[4] = 16;
      let bitmask[5] = 32;
      let bitmask[6] = 64;
      let bitmask[7] = 128;
      let bitmask[8] = 256;
      let bitmask[9] = 512;
      let bitmask[10] = 1024;
      let bitmask[11] = 2048;
      let bitmask[12] = 4096;
      let bitmask[13] = 8192;
      let bitmask[14] = 16384;
      let bitmask[15] = bitmask[14] + bitmask[14];

      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0)
      {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int acc;
      var int idx;

      let acc = 0;
      let idx = 0;

      while (idx < 16)
      {
        if (bitmask[idx] & y)
        {
          let acc = acc + x;
        }

        let x = x + x;
        let idx = idx + 1;
      }

      return acc;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    // see: https://raw.githubusercontent.com/preslavmihaylov/nand2tetris/master/JackOS/Math.jack
    function int divide(int x, int y) {
      var int q;
      var int yDoubled;
      var int result;
      var bool isNegative;

      let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
      let x = Math.abs(x);
      let y = Math.abs(y);


      if (y > x) {
        return 0;
      }
      
      let yDoubled = y + y;
      
      // overflow
      if (yDoubled < 0) {
        return 0;
      }

      let q = x / yDoubled;

      if ((x - (q * yDoubled)) < y) {
        let result = q + q;
      }
      else {
        let result = (q + q) + 1;
      }

      if (isNegative) {
        let result = -result;
      }

      return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int min;
      var int max;
      var int middle;
      var int middlePlusOne;
      var int firstBound;
      var int secondBound;

      let min = 0;
      let max = x;
      
      while (min < max)
      {
        let middle = (min + max) / 2;
        let middlePlusOne = middle + 1;
        
        let firstBound = middle * middle;
        let secondBound = middlePlusOne * middlePlusOne;

        if (firstBound < 0)
        {
            let max = middle;
        }
        else
        {
          // Without edge cases: (firstBound <= x) && (x < secondBound)
          if (((firstBound < x) | (firstBound = x)) & 
             ((x < secondBound) | (secondBound < 0)))
          {
            return middle;   
          }
          else
          {
            if (firstBound > x)
            {
              let max = middle;
            }
            else
            {
              let min = middle + 1;
            }
          }
        }
      }

      return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b)
      {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (b < a)
      {
        return b;
      }
      return a;
    }
}
