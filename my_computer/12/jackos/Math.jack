// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bitmask;

    /** Initializes the library. */
    function void init() {
      let bitmask = Array.new(16);
      let bitmask[0] = 1;
      let bitmask[1] = 2;
      let bitmask[2] = 4;
      let bitmask[3] = 8;
      let bitmask[4] = 16;
      let bitmask[5] = 32;
      let bitmask[6] = 64;
      let bitmask[7] = 128;
      let bitmask[8] = 256;
      let bitmask[9] = 512;
      let bitmask[10] = 1024;
      let bitmask[11] = 2048;
      let bitmask[12] = 4096;
      let bitmask[13] = 8192;
      let bitmask[14] = 16384;
      let bitmask[15] = bitmask[14] + bitmask[14];

      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0)
      {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int acc;
      var int idx;

      let acc = 0;
      let idx = 0;

      while (idx < 16)
      {
        if (bitmask[idx] & y)
        {
          let acc = acc + x;
        }

        let x = x + x;
        let idx = idx + 1;
      }

      return acc;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    // Algorithm from "6502 Software Design" by Leo Scanlon, (c) 1980
    function int divide(int dividend /* x */, int divisor /* y */) {
      var int quotient;
      var int partial_dividend;
      var int idx;
      var bool isNegative;

      let isNegative = ~((dividend < 0) = (divisor < 0));
      let dividend = Math.abs(dividend);
      let divisor = Math.abs(divisor);

      if (divisor > dividend) {
        return 0;
      }

      if (divisor = 0) {
        do Sys.error(3);
      }

      let quotient = 0;
      let partial_dividend = 0;
      let idx = 15;

      while (idx > -1)
      {
        if (dividend & bitmask[idx])
        {
          let partial_dividend = partial_dividend + partial_dividend + 1;
        }
        else
        {
          let partial_dividend = partial_dividend + partial_dividend;
        }

        if (divisor > partial_dividend)
        {
          let quotient = quotient + quotient + 0;
        }
        else
        {
          let partial_dividend = partial_dividend - divisor;
          let quotient = quotient + quotient + 1;
        }

        let idx = idx - 1;
      }

      if (isNegative)
      {
        return -quotient;
      }

      return quotient;
    }

    /** Returns the integer part of the square root of x. */
    // see: https://github.com/IvanIvanov/Jack-OS/blob/master/Math.jack
    function int sqrt(int x) {
      var int left, right, mid, midSq, result;

      if (x < 0)
      {
        do Sys.error(4);
      }

      let left = 0;
      let right = Math.min(x, 181);
      let result = 0;
      while (left < (right + 1))
      {
        let mid = (left + right) / 2;
        let midSq = mid * mid;
        if (midSq > x)
        {
          let right = mid - 1;
        }
        else
        {
          let left = mid + 1;
          let result = mid;
        }
      }

      return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b)
      {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (b < a)
      {
        return b;
      }
      return a;
    }
}
