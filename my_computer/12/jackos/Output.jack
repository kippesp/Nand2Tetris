// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack

/**
 * A library of functions for writing text on the screen.
 * The Hack physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed 
 * within a frame which is 11 pixels high (including 1 pixel for inter-line 
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left 
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
class Output {

    // Character map for displaying characters
    static Array charMaps; 

    // Cursor column index, [0, 63]
    static int cursor_col;

    // Cursor row index, [0, 22]
    static int cursor_row;

    /** Initializes the screen, and locates the cursor at the screen's top-left. */
    function void init() {
      let cursor_col = 0;
      let cursor_row = 0;

      do Output.initMap();

      return;
    }

    // Initializes the character map array
    function void initMap() {
        var int i;
    
        let charMaps = Array.new(127);
        
        // Black square, used for displaying non-printable characters.
        do Output.create(0,63,63,63,63,63,63,63,63,63,0,0);

        // Assigns the bitmap for each character in the charachter set.
        // The first parameter is the character index, the next 11 numbers
        // are the values of each row in the frame that represents this character.
        do Output.create(32,0,0,0,0,0,0,0,0,0,0,0);                   //
        do Output.create(33,8,8,8,8,8,8,8,0,8,0,0);                   // !
        do Output.create(34,36,36,36,0,0,0,0,0,0,0,0);                // "
        do Output.create(35,0,36,36,126,36,126,36,36,0,0,0);          // #
        do Output.create(36,0,8,60,10,28,40,30,8,0,0,0);              // $
        do Output.create(37,68,74,36,16,16,8,36,84,34,0,0);           // %
        do Output.create(38,0,0,12,18,18,12,82,34,92,0,0);            // &
        do Output.create(39,28,12,2,0,0,0,0,0,0,0,0);                 // '
        do Output.create(40,32,16,16,8,8,8,16,16,32,0,0);             // (
        do Output.create(41,4,8,8,16,16,16,8,8,4,0,0);                // )
        do Output.create(42,0,0,36,24,126,24,36,0,0,0,0);             // *
        do Output.create(43,0,0,8,8,62,8,8,0,0,0,0);                  // +
        do Output.create(44,0,0,0,0,0,0,0,28,12,2,0);                 // ,
        do Output.create(45,0,0,0,0,126,0,0,0,0,0,0);                 // -
        do Output.create(46,0,0,0,0,0,0,0,8,28,8,0);                  // .
        do Output.create(47,64,64,32,16,8,4,2,1,1,0,0);               // /

        do Output.create(48,24,36,66,66,66,66,66,36,24,0,0);          // 0
        do Output.create(49,8,12,10,8,8,8,8,8,62,0,0);                // 1
        do Output.create(50,60,66,66,64,32,24,4,2,126,0,0);           // 2
        do Output.create(51,126,64,32,16,56,64,64,66,60,0,0);         // 3
        do Output.create(52,32,48,40,36,34,34,126,32,32,0,0);         // 4
        do Output.create(53,126,2,2,58,70,64,64,66,60,0,0);           // 5
        do Output.create(54,56,4,2,2,58,70,66,66,60,0,0);             // 6
        do Output.create(55,126,64,32,16,16,8,8,4,4,0,0);             // 7
        do Output.create(56,60,66,66,66,60,66,66,66,60,0,0);          // 8
        do Output.create(57,60,66,66,98,92,64,64,32,28,0,0);          // 9

        do Output.create(58,0,0,8,28,8,0,0,8,28,8,0);                 // :
        do Output.create(59,0,0,8,28,8,0,0,28,12,2,0);                // ;
        do Output.create(60,64,32,16,8,4,8,16,32,64,0,0);             // <
        do Output.create(61,0,0,0,126,0,0,126,0,0,0,0);               // =
        do Output.create(62,2,4,8,16,32,16,8,4,2,0,0);                // >
        do Output.create(63,60,66,66,64,32,16,16,0,16,0,0);           // ?
        do Output.create(64,60,66,66,114,74,106,82,2,60,0,0);         // @

        do Output.create(65,24,36,66,66,66,126,66,66,66,0,0);         // A
        do Output.create(66,63,66,66,66,62,66,66,66,63,0,0);          // B
        do Output.create(67,60,66,2,2,2,2,2,66,60,0,0);               // C
        do Output.create(68,63,66,66,66,66,66,66,66,63,0,0);          // D
        do Output.create(69,126,2,2,2,30,2,2,2,126,0,0);              // E
        do Output.create(70,126,2,2,2,30,2,2,2,2,0,0);                // F
        do Output.create(71,60,66,2,2,2,114,66,98,92,0,0);            // G
        do Output.create(72,66,66,66,66,126,66,66,66,66,0,0);         // H
        do Output.create(73,62,8,8,8,8,8,8,8,62,0,0);                 // I
        do Output.create(74,120,32,32,32,32,32,32,34,28,0,0);         // J
        do Output.create(75,66,34,18,10,6,10,18,34,66,0,0);           // K
        do Output.create(76,2,2,2,2,2,2,2,2,126,0,0);                 // L
        do Output.create(77,65,65,99,85,73,73,65,65,65,0,0);          // M
        do Output.create(78,66,66,70,74,82,98,66,66,66,0,0);          // N
        do Output.create(79,60,66,66,66,66,66,66,66,60,0,0);          // O
        do Output.create(80,62,66,66,66,62,2,2,2,2,0,0);              // P
        do Output.create(81,60,66,66,66,66,66,74,82,60,64,0);         // Q
        do Output.create(82,62,66,66,66,62,10,18,34,66,0,0);          // R
        do Output.create(83,60,66,2,2,60,64,64,66,60,0,0);            // S
        do Output.create(84,127,8,8,8,8,8,8,8,8,0,0);                 // T
        do Output.create(85,66,66,66,66,66,66,66,66,60,0,0);          // U
        do Output.create(86,65,65,34,34,34,20,20,20,8,0,0);           // V
        do Output.create(87,65,65,65,65,73,73,73,85,34,0,0);          // W
        do Output.create(88,65,65,34,20,8,20,34,65,65,0,0);           // X
        do Output.create(89,65,65,34,20,8,8,8,8,8,0,0);               // Y
        do Output.create(90,126,64,32,16,8,4,2,2,126,0,0);            // Z

        do Output.create(91,60,4,4,4,4,4,4,4,60,0,0);                 // [
        do Output.create(92,1,1,2,4,8,16,32,64,64,0,0);               // \
        do Output.create(93,30,16,16,16,16,16,16,16,30,0,0);          // ]
        do Output.create(94,8,20,34,0,0,0,0,0,0,0,0);                 // ^
        do Output.create(95,0,0,0,0,0,0,0,0,0,127,0);                 // _
        do Output.create(96,28,24,32,0,0,0,0,0,0,0,0);                // `

        do Output.create(97,0,0,0,60,64,124,66,98,92,0,0);            // a
        do Output.create(98,2,2,2,58,70,66,66,70,58,0,0);             // b
        do Output.create(99,0,0,0,60,66,2,2,66,60,0,0);               // c
        do Output.create(100,64,64,64,92,98,66,66,98,92,0,0);         // d
        do Output.create(101,0,0,0,60,66,126,2,66,60,0,0);            // e
        do Output.create(102,56,68,4,4,62,4,4,4,4,0,0);               // f
        do Output.create(103,0,0,0,92,34,34,28,2,60,66,60);           // g
        do Output.create(104,2,2,2,58,70,66,66,66,66,0,0);            // h
        do Output.create(105,0,8,0,12,8,8,8,8,62,0,0);                // i
        do Output.create(106,0,32,0,48,32,32,32,32,34,34,28);         // j
        do Output.create(107,2,2,2,34,18,14,18,34,66,0,0);            // k
        do Output.create(108,12,8,8,8,8,8,8,8,62,0,0);                // l
        do Output.create(109,0,0,0,55,73,73,73,73,65,0,0);            // m
        do Output.create(110,0,0,0,58,70,66,66,66,66,0,0);            // n
        do Output.create(111,0,0,0,60,66,66,66,66,60,0,0);            // o
        do Output.create(112,0,0,0,58,70,66,70,58,2,2,2);             // p
        do Output.create(113,0,0,0,92,98,66,98,92,64,64,64);          // q
        do Output.create(114,0,0,0,58,68,4,4,4,4,0,0);                // r
        do Output.create(115,0,0,0,60,66,12,48,66,60,0,0);            // s
        do Output.create(116,0,4,4,62,4,4,4,68,56,0,0);               // t
        do Output.create(117,0,0,0,34,34,34,34,34,92,0,0);            // u
        do Output.create(118,0,0,0,34,34,34,20,20,8,0,0);             // v
        do Output.create(119,0,0,0,65,65,73,73,85,34,0,0);            // w
        do Output.create(120,0,0,0,66,36,24,24,36,66,0,0);            // x
        do Output.create(121,0,0,0,66,66,66,98,92,64,66,60);          // y
        do Output.create(122,0,0,0,126,32,16,8,4,126,0,0);            // z

        do Output.create(123,112,8,8,16,12,16,8,8,112,0,0);           // {
        do Output.create(124,8,8,8,8,8,8,8,8,8,0,0);                  // |
        do Output.create(125,14,16,16,8,48,8,16,16,14,0,0);           // }
        do Output.create(126,36,42,18,0,0,0,0,0,0,0,0);               // ~

	return;
    }

    // Creates the character map array of the given character index, using the given values.
    function void create(int index, int a, int b, int c, int d, int e,
                         int f, int g, int h, int i, int j, int k) {
	var Array map;

	let map = Array.new(11);
        let charMaps[index] = map;

        let map[0] = a;
        let map[1] = b;
        let map[2] = c;
        let map[3] = d;
        let map[4] = e;
        let map[5] = f;
        let map[6] = g;
        let map[7] = h;
        let map[8] = i;
        let map[9] = j;
        let map[10] = k;

        return;
    }
    
    // Returns the character map (array of size 11) of the given character.
    // If the given character is invalid or non-printable, returns the
    // character map of a black square.
    function Array getMap(char c) {
        if ((c < 32) | (c > 126)) {
            let c = 0;
        }
        return charMaps[c];
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
      if ((j > 63) | (i > 22) | (j < 0) | (i < 0))
      {
        // error: OUTPUT_MOVECURSOR_ILLEGAL_POSITION
        do Sys.error(20);
      }

      let cursor_col = j;
      let cursor_row = i;

      do Output.drawChar(32);

      return;
    }

    /* Same as printChar without the cursor movement */
    function void drawChar(char c) {
      var int base_address;
      var int word_offset;
      var int idx;
      var int pixel_updates;
      var Array char_map;

      // address      16384  16385  16386
      // word offset      0      1      2
      // col. idx       0 1    2 3    4 5
      //              [----] [----] [----] [----] [----] [----] [----] [----]

      let char_map = Output.getMap(c);

      let word_offset = (32 * cursor_row * 11) + Output.lsr(cursor_col, 1);
      let base_address = 16384;

      let idx = 0;

      while (idx < 11)
      {
        let pixel_updates = Memory.peek(base_address + word_offset);
        if (cursor_col & 1)
        {
          // character is in the upper nibble, clear it
          let pixel_updates = pixel_updates & 255;
          let pixel_updates = pixel_updates | (char_map[idx] * 256);
        }
        else
        {
          // character is in the lower nibble, clear it
          let pixel_updates = pixel_updates & (-256);
          let pixel_updates = pixel_updates | char_map[idx];
        }

        do Memory.poke(base_address + word_offset, pixel_updates);
        let word_offset = word_offset + 32;

        let idx = idx + 1;
      }

      return;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
      if (c = 128)
      {
        // newline
        do Output.println();
        return;
      }

      if (c = 129)
      {
        // backspace
        do Output.backSpace();
        return;
      }

      do Output.drawChar(c);

      let cursor_col = cursor_col + 1;

      if (cursor_col > 63)
      {
        do Output.println();
      }

      return;
    }

    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
      var int len, idx;

      let len = s.length();
      let idx = 0;

      while (idx < len)
      {
        do Output.printChar(s.charAt(idx));
        let idx = idx + 1;
      }

      return;
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int val) {
      var Array buff;
      var int mod10, len;
      var boolean is_neg;

      let buff = Array.new(5);
      let len = 0;

      if (val < 0)
      {
        let is_neg = true;
        let val = -val;
      }

      if (val = 0)
      {
        let buff[0] = 0;
        let len = 1;
      }

      while (val > 0)
      {
        let mod10 = Output.mod(val, 10);
        let buff[len] = mod10;
        let val = val / 10;
        let len = len + 1;
      }

      if (is_neg)
      {
        do Output.printChar(45);
      }

      while (len > 0)
      {
        do Output.printChar(48 + buff[len - 1]);
        let len = len - 1;
      }

      do buff.dispose();

      return;
    }

    /** Advances the cursor to the beginning of the next line. */
    function void println() {
      let cursor_col = 0;
      let cursor_row = cursor_row + 1;

      if (cursor_row > 22)
      {
        let cursor_row = 0;
      }

      return;
    }

    /** Moves the cursor one column back. */
    function void backSpace() {
      let cursor_col = cursor_col - 1;

      if (cursor_col < 0)
      {
        let cursor_col = 63;
        let cursor_row = cursor_row - 1;
      }

      if (cursor_row < 0)
      {
        let cursor_row = 22;
      }

      do Output.drawChar(32);

      return;
    }

    // Logical shift right
    //    - function int lsr(int v, int pos);

    // Modulus
    //    - function int mod(int a, int b);

    //////////////////////////////////////////////////////////////////////////
    // #
    // # Python version
    // #
    // def lsr(v, pos):
    //   mask = 0x1
    //   acc = 0
    //   idx = 0
    //
    //   # Get mask to starting bit
    //   while (idx < pos):
    //     mask = mask + mask
    //     idx = idx + 1
    //
    //   idx = pos
    //
    //   shifted_mask = 0x1
    //
    //   while (idx < 16):
    //     if v & mask:
    //       acc = acc | shifted_mask
    //     mask = mask + mask
    //     shifted_mask = shifted_mask + shifted_mask
    //     idx = idx + 1
    //
    //   return acc
    //////////////////////////////////////////////////////////////////////////

    // logical shift right by `pos` bits
    function int lsr(int v, int pos)
    {
      var int mask, acc, idx;
      var int shifted_mask;

      let mask = 1;
      let acc = 0;
      let idx = 0;

      // Get mask to starting bit
      while (idx < pos)
      {
        let mask = mask + mask;
        let idx = idx + 1;
      }

      let idx = pos;

      let shifted_mask = 1;

      while (idx < 16)
      {
        if (v & mask)
        {
          let acc = acc | shifted_mask;
        }

        let mask = mask + mask;
        let shifted_mask = shifted_mask + shifted_mask;
        let idx = idx + 1;
      }

      return acc;
    }

    function int mod(int a, int b)
    {
      var int div;

      let div = a / b;

      return a - (div * b);
    }
}
