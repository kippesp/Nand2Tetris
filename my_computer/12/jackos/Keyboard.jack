// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static Array MEM; 

    /** Initializes the keyboard. */
    function void init() {
      let MEM = 0;

      return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
      // 24576 = 0x6000 - keyboard mapped i/o

      return MEM[24576];
    }

    function char readCharNoEcho() {
      var char ch;

      let ch = 0;

      // wait for a key
      while (MEM[24576] = 0) { /* do nothing */ }

      let ch = MEM[24576];

      // wait until key value changes
      while (MEM[24576] = ch) { /* do nothing */ }

      return ch;
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
      var char ch;

      let ch = Keyboard.readCharNoEcho();
      do Output.printChar(ch);
      return ch;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
      var int len, idx, jdx;
      var char ch;
      var Array buffer;
      var String str;

      let len = 0;
      let idx = 0;
      let ch = 0;
      let buffer = Array.new(64);   // arbitrary max

      do Output.printString(message);

      while (~(ch = 128))
      {
        let ch = Keyboard.readCharNoEcho();

        if (ch = 129)
        {
          if (idx > 0)
          {
            let idx = idx - 1;
            do Output.printChar(ch);
          }
        }
        else
        {
          if (~(ch = 128))
          {
            let buffer[idx] = ch;
            let idx = idx + 1;
            do Output.printChar(ch);

            if (idx > 64)
            {
              // string is full
              do Sys.error(17);
            }
          }
        }
      }

      do Output.printChar(128);

      let str = String.new(idx);
      let jdx = 0;

      while (jdx < idx)
      {
        do str.appendChar(buffer[jdx]);
        let jdx = jdx + 1;
      }

      return str;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
      var String str;

      let str = Keyboard.readLine(message);

      return str.intValue();
    }
}
