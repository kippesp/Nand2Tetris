# x: 0 .. 255
# y: 0 .. 511
SCREEN = [x for x in range(0, 512*256 // 2)]
BITMASK = [1 << x for x in range(0, 16)]

# fill with checkerboard
for y in range(0, 512):
  for x in range(0, 256 // 2):
    SCREEN[x + y * 256//2] = 0

def rect(x1, y1, x2, y2):
  print(x1, y1, "  ", x2, y2)
    # rect: (16, 0) to (31, 3)
    #
    #          0        8        16                 32                 48                 64
    #    0:  0 ........|........  X.......|.......X  ........|........  ........|........  .
    #   32:  1 ........|........  ........|........  ........|........  ........|........  .
    #   64:  2 ........|........  ........|........  ........|........  ........|........  .
    #   96:  3 ........|........  X.......|.......X  ........|........  ........|........  .
    #  128:  4 ........|........  ........|........  ........|........  ........|........  .
    #  160:  5 ........|........  ........|........  ........|........  ........|........  .
    #         15        7      0 15        7      0 15        7      0 15        7      0 15
    #
    # rect: (16, 0) to (32, 3)
    #
    #          0        8        16                 32                 48                 64
    #    0:  0 ........|........  X.......|........  X.......|........  ........|........  .
    #   32:  1 ........|........  ........|........  ........|........  ........|........  .
    #   64:  2 ........|........  ........|........  ........|........  ........|........  .
    #   96:  3 ........|........  X.......|........  X.......|........  ........|........  .
    #  128:  4 ........|........  ........|........  ........|........  ........|........  .
    #  160:  5 ........|........  ........|........  ........|........  ........|........  .
    #         15        7      0 15        7      0 15        7      0 15        7      0 15
    #
    # rect: (15, 0) to (31, 3)
    #
    #          0        8        16                 32                 48                 64
    #    0:  0 ........|.......X  ........|.......X  ........|........  ........|........  .
    #   32:  1 ........|........  ........|........  ........|........  ........|........  .
    #   64:  2 ........|........  ........|........  ........|........  ........|........  .
    #   96:  3 ........|.......X  ........|.......X  ........|........  ........|........  .
    #  128:  4 ........|........  ........|........  ........|........  ........|........  .
    #  160:  5 ........|........  ........|........  ........|........  ........|........  .
    #         15        7      0 15        7      0 15        7      0 15        7      0 15
    #
    # rect: (13, 0) to (33, 3)
    #
    #          0        8        16                 32                 48                 64
    #    0:  0 ........|.....X..  ........|........  .X......|........  ........|........  .
    #   32:  1 ........|........  ........|........  ........|........  ........|........  .
    #   64:  2 ........|........  ........|........  ........|........  ........|........  .
    #   96:  3 ........|.....X..  ........|........  .X......|........  ........|........  .
    #  128:  4 ........|........  ........|........  ........|........  ........|........  .
    #  160:  5 ........|........  ........|........  ........|........  ........|........  .
    #         15        7      0 15        7      0 15        7      0 15        7      0 15
    #
    # rect: ( 7, 1) to (56, 5)
    #
    #          0        8        16                 32                 48                 64
    #    0:  0 ........|........  ........|........  ........|........  ........|........  .
    #   32:  1 .......X|........  ........|........  ........|........  ........|X.......  .
    #   64:  2 ........|........  ........|........  ........|........  ........|........  .
    #   96:  3 ........|........  ........|........  ........|........  ........|........  .
    #  128:  4 ........|........  ........|........  ........|........  ........|........  .
    #  160:  5 .......X|........  ........|........  ........|........  ........|X.......  .
    #         15        7      0 15        7      0 15        7      0 15        7      0 15

  # Calculate left side mask
  m_modulus = x1 % 16
  m_quotient = x1 // 16
  start_word_offset = m_quotient + (y1 * 32)

  if m_modulus == 0:
    has_left_mask = False
  else:
    has_left_mask = True      # has partials

  bit_idx = 15 - m_modulus
  left_mask = 0
  if has_left_mask:
    while not (bit_idx < 0):
      left_mask = left_mask | BITMASK[bit_idx]
      bit_idx = bit_idx - 1

  # Calculate right side mask
  m_modulus = x2 % 16
  m_quotient = x2 // 16
  stop_word_offset = m_quotient + (y2 * 32)
  right_mask = 0

  word_width = m_quotient + (y1 * 32) - start_word_offset + 1

  if m_modulus == 15:
    has_right_mask = False
  else:
    has_right_mask = True     # has partials

  bit_idx = m_modulus
  if has_right_mask:
    while not (bit_idx < 0):
      right_mask = right_mask | BITMASK[15 - bit_idx]
      bit_idx = bit_idx - 1

  print("has_left_mask  : %s" % str(has_left_mask))
  print("left_mask      : %04x" % left_mask)
  print("has_right_mask : %s" % str(has_right_mask))
  print("right_mask     : %04x" % right_mask)
  print("start_word_offset: %d" % start_word_offset)
  print("stop_word_offset : %d" % stop_word_offset)
  print("word_width       : %d" % word_width)
  print("\n\n")

  # Top line

  # Reduce word width (number of words) if there is a right mask
  if has_right_mask:
    word_width = word_width - 1

  while not (start_word_offset > stop_word_offset):
    print("start_word_offset: %3d ::" % start_word_offset, "", end="")
    idx = 0
    if has_left_mask:
      print("%04x" % left_mask, "", end="")
      idx = idx + 1
    while not (start_word_offset + idx > start_word_offset + word_width - 1):
      print("%04x" % 0xffff, "", end="")
      idx = idx + 1
    if has_right_mask:
      print("%04x" % right_mask, "", end="")
      idx = idx + 1
    start_word_offset = start_word_offset + 32
    print()

  print("===================\n\n")

def main():
  rect(16, 0, 31, 3)
  rect(16, 0, 32, 3)
  rect(15,  0, 31, 3)
  rect(13, 0, 33, 3)
  rect( 7, 1, 56, 5)
  rect( 7, 41, 56, 45);

if __name__ == '__main__':
  main()
