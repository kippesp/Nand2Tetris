// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Not(in=instruction[2], out=notInstruction2);
        Not(in=instruction[3], out=notInstruction3);
        Not(in=instruction[6], out=notInstruction6);
        Not(in=instruction[7], out=notInstruction7);
        Not(in=instruction[8], out=notInstruction8);
        Not(in=instruction[9], out=notInstruction9);
        Not(in=instruction[10], out=notInstruction10);
        Not(in=instruction[11], out=notInstruction11);
        Not(in=instruction[12], out=notInstruction12);
        Not(in=instruction[15], out=notInstruction15);

        // Load A with instruction or ALU
        Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
        And(a=notInstruction15, b=notInstruction12, out=loadAa);
        Or(a=loadAa, b=instruction[5], out=loadA);
        ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

        And(a=instruction[15], b=instruction[4], out=loadD);
        DRegister(in=outALU, load=loadD, out=outD);

        And(a=instruction[15], b=instruction[12], out=loadAorM);
        Mux16(a=outA, b=inM, sel=loadAorM, out=outAorM);

        // ALU control logic
        And(a=instruction[8], b=instruction[9], out=instruction89);
        And(a=instruction[8], b=instruction[10], out=instruction810);
        And(a=instruction[6], b=instruction[7], out=instruction67);
        And(a=notInstruction9, b=notInstruction10, out=notInstruction910);
        And(a=notInstruction8, b=notInstruction9, out=notInstruction89);
        And(a=notInstruction7, b=notInstruction8, out=notInstruction78);

        Or8Way(in[7]=instruction[11], in[6]=instruction[10],
               in[5]=notInstruction9, in[4]=notInstruction8,
               in[3]=notInstruction6,
               out=fa);
        Or8Way(in[7]=notInstruction11, in[6]=notInstruction10,
               in[5]=instruction[9], in[4]=instruction[8],
               in[3]=notInstruction6,
               out=fb);
        And(a=fa, b=fb, out=fc);
        And(a=fc, b=instruction[7], out=f);

        And(a=fc, b=instruction[6], out=no);

        ALU(x=outD, y=outAorM, zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8],
            f=f, no=no, zr=zr, ng=ng, out=outALU, out=outM);

        And(a=instruction[15], b=instruction[3], out=writeM);

        // Jump logic
        DMux8Way(in=ng, sel=instruction[0..2], e=negJLT, f=negJNE, g=negJLE, h=negJMP);
        DMux8Way(in=zr, sel=instruction[0..2], c=zeroJEQ, d=zeroJGE,
                 g=zeroJLE, h=zeroJMP);
        Not(in=zr, out=notzr);
        Not(in=ng, out=notng);
        And(a=notzr, b=notng, out=pos);
        DMux8Way(in=pos, sel=instruction[0..2], b=posJGT, d=posJGE, f=posJNE, h=posJMP);
        Or8Way(in[7]=negJLT, in[6]=negJLE, in[5]=negJMP, in[4]=zeroJEQ,
               in[3]=zeroJGE, in[2]=zeroJLE, in[1]=zeroJMP, in[0]=negJNE, out=negOrZeroJmp);
        Or8Way(in[7]=posJGT, in[6]=posJGE, in[5]=posJMP, in[4]=posJNE, in[3]=negOrZeroJmp,
               out=condJmp);
        Or8Way(in[5..7]=instruction[0..2], out=instJmp);
        And(a=instJmp, b=instruction[15], out=loadPCa);
        And(a=loadPCa, b=condJmp, out=loadPC);

        PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}


/*
X==D
Y==A/M
        A   B   C   D   E   F           c1  c2  c3 c4
a=0    c1  c2  c3  c4  c5  c6   a=1     zx  nx  zy  ny  f  no
0       1   0   1   0   1   0           1   0   1   0   X  0   &
1       1   1   1   1   1   1           1   1   1   1   1  1   +
-1      1   1   1   0   1   0           1   1   1   0   1  0   +
D       0   0   1   1   0   0           0   0   1   1   0  0   &  
A       1   1   0   0   0   0   M       1   1   0   0   0  0   &  
!D      0   0   1   1   0   1           0   0   1   1   0  1   &  
!A      1   1   0   0   0   1   !M      1   1   0   0   0  1   &  
-D      0   0   1   1   1   1           0   0   1   1   0< 0<  &  
-A      1   1   0   0   1   1   -M      1   1   0   0   0< 0<  &  
D+1     0   1   1   1   1   1           0   1   1   1   1  1   +  
A+1     1   1   0   1   1   1   M+1     1   1   0   1   1  1   +  
D-1     0   0   1   1   1   0           0   0   1   1   1  0   +  
A-1     1   1   0   0   1   0   M-1     1   1   0   0   1  0   +  
D+A     0   0   0   0   1   0   D+M     0   0   0   0   1  0   +  
D-A     0   1   0   0   1   1   D-M     0   1   0   0   1  1   +  
A-D     0   0   0   1   1   1   M-D     0   0   0   1   1  1   +  
D&A     0   0   0   0   0   0   D&M     0   0   0   0   0  0   &  
D|A     0   1   0   1   0   1   D|M     0   1   0   1   0  1   &  
 */
