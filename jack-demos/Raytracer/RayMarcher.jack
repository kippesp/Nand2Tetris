// A raymarcher and some related funtions: how to calculate the normal
// at a given point of the scene, and what is the light intensity.
class RayMarcher {
    // Parameters
    static Float316 PARAM_precision, PARAM_maxDist;
    static Vec3 PARAM_exyy, PARAM_eyyx, PARAM_eyxy, PARAM_exxx;
    static Vec3 PARAM_lightPos, PARAM_camPos;
    static Float316 PARAM_kd_id, PARAM_ks_is;
    
    // Variables for temporal computations
    static Float316 RAYMATCH_depth;
    static Vec3 RAYMATCH_p;
    
    static Vec3 CNORMAL_pExyy, CNORMAL_pEyyx, CNORMAL_pEyxy, CNORMAL_pExxx;
    static Surface CNORMAL_sdScene;
    static Float316 CNORMAL_sd1, CNORMAL_sd2, CNORMAL_sd3, CNORMAL_sd4;
    static Vec3 CNORMAL_exyyMulSd1, CNORMAL_eyyxMulSd2;
    static Vec3 CNORMAL_eyxyMulSd3, CNORMAL_exxxMulSd4;
    
    static Vec3 LIGHT_lightDir, LIGHT_camDir, LIGHT_reflectDir;
    static Float316 LIGHT_angle;
    
    function void init() {
        // Parameters
        let PARAM_precision = Parameters.precision();
        let PARAM_maxDist = Parameters.maxDist();
        let PARAM_exyy = Parameters.exyy();
        let PARAM_eyyx = Parameters.eyyx();
        let PARAM_eyxy = Parameters.eyxy();
        let PARAM_exxx = Parameters.exxx();
        let PARAM_lightPos = Parameters.lightPos();
        let PARAM_camPos = Parameters.cameraPos();
        let PARAM_kd_id = Parameters.kd_id();
        let PARAM_ks_is = Parameters.ks_is();
    
        // Variables for temporal computations
        let RAYMATCH_depth = Float316.newZero();
        let RAYMATCH_p = Vec3.newZero();
        
        let CNORMAL_pExyy = Vec3.newZero();
        let CNORMAL_pEyyx = Vec3.newZero();
        let CNORMAL_pEyxy = Vec3.newZero();
        let CNORMAL_pExxx = Vec3.newZero();
        let CNORMAL_sdScene = Surface.newZero();
        let CNORMAL_sd1 = Float316.newZero();
        let CNORMAL_sd2 = Float316.newZero();
        let CNORMAL_sd3 = Float316.newZero();
        let CNORMAL_sd4 = Float316.newZero();
        let CNORMAL_exyyMulSd1 = Vec3.newZero();
        let CNORMAL_eyyxMulSd2 = Vec3.newZero();
        let CNORMAL_eyxyMulSd3 = Vec3.newZero();
        let CNORMAL_exxxMulSd4 = Vec3.newZero();
        
        let LIGHT_lightDir = Vec3.newZero();
        let LIGHT_camDir = Vec3.newZero();
        let LIGHT_reflectDir = Vec3.newZero();
        let LIGHT_angle = Float316.newZero();
        return;
    }
    
    // The heart and soul of our program: a simple raymarching algorithm.
    // Cast a ray from ray origin ro towards ray direction rd until
    // we are close enough to a surface.
    function void rayMarch(Surface res, Vec3 ro, Vec rd, int maxStep) {
        var int i;
        var boolean break;
        var Float316 resSd;
        
        // depth = minDist initialization (minDist here is 0.0)
        do RAYMATCH_depth.set(0, 0, 0);
        
        let break = false;
        while ((i < maxStep) & (~break)) {
            // p = ro + (rd * depth)
            do Vec3.cmul(RAYMATCH_p, rd, RAYMATCH_depth);
            do Vec3.add(RAYMATCH_p, ro, RAYMATCH_p);
            
            // get the closest surface
            do Scene.sdScene(res, RAYMATCH_p);
            
            // we can increase the depth by the signed distance
            // depth += res.sd
            let resSd = res.sd();
            do Float316.add(RAYMATCH_depth, RAYMATCH_depth, resSd);
            
            // if the ray hit a surface or reached the maximum distance, break
            if (PARAM_precision.gt(resSd) | RAYMATCH_depth.gt(PARAM_maxDist)) {
                let break = true;
            }
            
            let i = i + 1;
        }
        
        do resSd.set(RAYMATCH_depth.s(), RAYMATCH_depth.e(), RAYMATCH_depth.m());
        return;
    }
    
    // Calculate the normal vector at point p based on the scene.
    // This uses a trick called "Tetrahedron technique", see link for more:
    // https://iquilezles.org/articles/normalsSDF/
    function void calcNormal(Vec3 res, Vec3 p) {
        var Float316 sd;
        
        // sd1 = sdScene(p + exyy).sd
        do Vec3.add(CNORMAL_pExyy, p, PARAM_exyy);
        do Scene.sdScene(CNORMAL_sdScene, CNORMAL_pExyy);
        let sd = CNORMAL_sdScene.sd();
        do CNORMAL_sd1.set(sd.s(), sd.e(), sd.m());

        // sd2 = sdScene(p + eyyx).sd
        do Vec3.add(CNORMAL_pEyyx, p, PARAM_eyyx);
        do Scene.sdScene(CNORMAL_sdScene, CNORMAL_pEyyx);
        let sd = CNORMAL_sdScene.sd();
        do CNORMAL_sd2.set(sd.s(), sd.e(), sd.m());
        
        // sd3 = sdScene(p + eyxy).sd
        do Vec3.add(CNORMAL_pEyxy, p, PARAM_eyxy);
        do Scene.sdScene(CNORMAL_sdScene, CNORMAL_pEyxy);
        let sd = CNORMAL_sdScene.sd();
        do CNORMAL_sd3.set(sd.s(), sd.e(), sd.m());

        // sd4 = sdScene(p + exxx).sd
        do Vec3.add(CNORMAL_pExxx, p, PARAM_exxx);
        do Scene.sdScene(CNORMAL_sdScene, CNORMAL_pExxx);
        let sd = CNORMAL_sdScene.sd();
        do CNORMAL_sd4.set(sd.s(), sd.e(), sd.m());
        
        // res = normalize(exyy * sd1 + eyyx * sd2 + eyxy * sd3 + exxx * sd4)
        do Vec3.cmul(CNORMAL_exyyMulSd1, PARAM_exyy, CNORMAL_sd1);
        do Vec3.cmul(CNORMAL_eyyxMulSd2, PARAM_eyyx, CNORMAL_sd2);
        do Vec3.cmul(CNORMAL_eyxyMulSd3, PARAM_eyxy, CNORMAL_sd3);
        do Vec3.cmul(CNORMAL_exxxMulSd4, PARAM_exxx, CNORMAL_sd4);
        
        do Vec3.add(res, CNORMAL_exyyMulSd1, CNORMAL_eyyxMulSd2);
        do Vec3.add(res, res, CNORMAL_eyxyMulSd3);
        do Vec3.add(res, res, CNORMAL_exxxMulSd4);
        
        do UtilsVec.normalize(res, res);
        return;
    }
    
    // Calculate the light intensity at point p with normal vector
    // norm and light position lightPos. It uses the Phong reflection
    // model with ambient, diffuse and specular components
    function void lightIntensity(Float316 res, Vec3 p, Vec3 norm) {
        // lightDir = normalize(lightPos - p)
        do Vec3.sub(LIGHT_lightDir, PARAM_lightPos, p);
        do UtilsVec.normalize(LIGHT_lightDir, LIGHT_lightDir);

        // camDir = normalize(camPos - p)
        do Vec3.sub(LIGHT_camDir, PARAM_camPos, p);
        do UtilsVec.normalize(LIGHT_camDir, LIGHT_camDir);

        // reflectDir = 2.0 * angle(lightDir, norm) * norm - lightDir
        do UtilsVec.angle(LIGHT_angle, LIGHT_lightDir, norm);
        do LIGHT_angle.double();
        do Vec3.cmul(LIGHT_reflectDir, norm, LIGHT_angle);
        do Vec3.sub(LIGHT_reflectDir, LIGHT_reflectDir, LIGHT_lightDir);
        
        // diffuseLight = kd * angle(lightDir, norm) * id
        do UtilsVec.angle(LIGHT_angle, LIGHT_lightDir, norm);
        do Float316.mul(res, PARAM_kd_id, LIGHT_angle);
        
        // specularLight = ks * math.pow(angle(reflectDir, camDir), 4) * iss
        do UtilsVec.angle(LIGHT_angle, LIGHT_reflectDir, LIGHT_camDir);
        do Float316.mul(LIGHT_angle, LIGHT_angle, LIGHT_angle);
        do Float316.mul(LIGHT_angle, LIGHT_angle, LIGHT_angle);
        do Float316.mul(LIGHT_angle, LIGHT_angle, PARAM_ks_is);

        do Float316.add(res, res, LIGHT_angle);
        return;
    }
}
