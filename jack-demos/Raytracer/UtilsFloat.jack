// A couple of functions that use Float316 variables
// for internal computations.
class UtilsFloat {
    // Constants
    static Float316 CONST_MINUS_ONE, CONST_THREE_HALFS;
    
    // Variables for temporal computations
    static Float316 SQRT_tmpRes, SQRT_xDivTmp;
    
    static Float316 ISQRT_x2, ISQRT_y, ISQRT_tmpRes;
    
    function void init() {
        // Constants
        let CONST_MINUS_ONE = Float316.new(1, 127, 8192);  // -1.0
        let CONST_THREE_HALFS = Float316.new(0, 127, 12288);  // 1.5
        
        // Variables for temporal computations
        let SQRT_tmpRes = Float316.newZero();
        let SQRT_xDivTmp = Float316.newZero();
        
        let ISQRT_x2 = Float316.newZero();
        let ISQRT_y = Float316.newZero();
        let ISQRT_tmpRes = Float316.newZero();
        return;
    }
    
    // res = floor(f), where both res and f are Float316 numbers.
    // floor(f) is always the biggest integer such that floor(f) <= f
    // Examples:
    //   floor(3.0) = 3.0
    //   floor(3.2) = 3.0
    //   floor(3.9) = 3.0
    //   floor(-3.0) = -3.0
    //   floor(-3.2) = -4.0
    //   floor(0.0) = 0.0
    function void floor(Float316 res, Float316 f) {
        var int fs, fe, fm;
        var int i, mask, mantissa;
        
        let fs = f.s();
        let fe = f.e();
        let fm = f.m();
        
        // if number is smaller than 1.0
        if (fe < 127) {
            // if positive, return 0.0
            if (fs = 0) {
                do res.set(0, 0, 0);
                return;
            }
            // else, return -1.0
            do res.set(1, 127, 8192);
            return;
        }
        
        // The actual rounding is just cropping the tail of the mantissa.
        // The length of the cropping depends on the exponent.
        let i = fe - 127;
        let mask = (~0) - (TwoToThePower.of(13-i) - 1);
        let mantissa = fm & mask;
        
        // The pseudo-result
        do res.set(fs, fe, mantissa);
        
        // But this is a floor on the absolute value.
        // If f is a negative number and it was not already a whole number,
        // we have to substract 1.
        if ( (fs = 1) & (~(fm = mantissa)) ) {
            do Float316.add(res, res, CONST_MINUS_ONE);
        }
        
        return;
    }
    
    // res = sqrt(x)
    function void sqrt(Float316 res, Float316 x) {
        var int xs, xe, xm;
        
        let xs = x.s();
        let xe = x.e();
        let xm = x.m();
        
        if (xs > 0) {
            do Sys.error(2);
        }
        
        // initial guess: just half the exponent
        if ((xe & 1) > 0) {
            do SQRT_tmpRes.set(0, (xe / 2) + 64, xm);
        } else {
            do SQRT_tmpRes.set(0, (xe / 2) + 63, xm);
        }

        // Newton-Raphson method with some iterations
        // res = 0.5 * (res + x/res)
        do Float316.div(SQRT_xDivTmp, x, SQRT_tmpRes);
        do Float316.add(SQRT_tmpRes, SQRT_tmpRes, SQRT_xDivTmp);
        do SQRT_tmpRes.halve();
        
        // res = 0.5 * (res + x/res)
        do Float316.div(SQRT_xDivTmp, x, SQRT_tmpRes);
        do Float316.add(SQRT_tmpRes, SQRT_tmpRes, SQRT_xDivTmp);
        do SQRT_tmpRes.halve();
        
        do res.set(0, SQRT_tmpRes.e(), SQRT_tmpRes.m());
        return;
    }
    
    // res = 1.0 / sqrt(x)
    // Uses a simplified version of the "Fast Inverse Square Root" trick, see
    // https://en.wikipedia.org/wiki/Fast_inverse_square_root
    // and:
    // https://githubharald.github.io/fast_inv_sqrt.html
    function void invSqrt(Float316 res, Float316 x) {
        var int xs, xe, xm;
        
        let xs = x.s();
        let xe = x.e();
        let xm = x.m();
        
        if (xs > 0) {
            do Sys.error(3);
        }
        
        // precompute x half
        do ISQRT_x2.set(0, xe - 1, xm);

        // initial guess: just modify the exponent
        do ISQRT_y.set(0, 190 - (xe / 2), 8192);
        
        // Newton-Raphson method
        // y  = y * ( threehalfs - ( x2 * y * y ) );
        do Float316.mul(ISQRT_tmpRes, ISQRT_x2, ISQRT_y);
        do Float316.mul(ISQRT_tmpRes, ISQRT_tmpRes, ISQRT_y);
        do Float316.sub(ISQRT_tmpRes, CONST_THREE_HALFS, ISQRT_tmpRes);
        do Float316.mul(ISQRT_y, ISQRT_y, ISQRT_tmpRes);

        // y  = y * ( threehalfs - ( x2 * y * y ) );
        do Float316.mul(ISQRT_tmpRes, ISQRT_x2, ISQRT_y);
        do Float316.mul(ISQRT_tmpRes, ISQRT_tmpRes, ISQRT_y);
        do Float316.sub(ISQRT_tmpRes, CONST_THREE_HALFS, ISQRT_tmpRes);
        do Float316.mul(ISQRT_y, ISQRT_y, ISQRT_tmpRes);
        
        do res.set(0, ISQRT_y.e(), ISQRT_y.m());
        return;
    }
}
