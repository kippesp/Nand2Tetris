// The main attraction.
class ImageRenderer {
    // Constants
    static Float316 CONST_ONE, CONST_HALF;
    static Float316 CONST_IMG_WIDTH, CONST_IMG_HALF_WIDTH;
    static Float316 CONST_IMG_HEIGHT, CONST_IMG_HALF_HEIGHT;

    function void init() {
        // Constants
        let CONST_ONE = Float316.new(0, 127, 8192);  // 1.0
        let CONST_HALF = Float316.new(0, 126, 8192);  // 0.5
        let CONST_IMG_WIDTH = Float316.new(0, 136, 8192);        // 512.0
        let CONST_IMG_HALF_WIDTH = Float316.new(0, 135, 8192);   // 256.0
        let CONST_IMG_HEIGHT = Float316.new(0, 135, 8192);       // 256.0
        let CONST_IMG_HALF_HEIGHT = Float316.new(0, 134, 8192);  // 128.0
        return;
    }

    // The main function: iterate through all the pixels, calculate their
    // intensity value, apply dithering, and finally draw that pixel
    function void render() {
        var Float316 pixelValue, u, v, x, y;
        var int xInt, yInt, xIntMod8, yIntMod8;
        
        let pixelValue = Float316.newZero();
        let u = Float316.newZero();
        let v = Float316.newZero();
        let x = Float316.newZero();
        let y = Float316.newZero();
        
        // For every row
        while( CONST_IMG_HEIGHT.gt(y) ) {
            do x.set(0, 0, 0);
            let xInt = 0;
            
            // For every column
            while ( CONST_IMG_WIDTH.gt(x) ) {
				// (u,v) normalized coordinates from (x,y)
                // u = (x - 0.5*512) / 256
                do Float316.sub(u, x, CONST_IMG_HALF_WIDTH);
                do Float316.div(u, u, CONST_IMG_HEIGHT);
                
                // v = -(y - 0.5*256) / 256
                do Float316.sub(v, y, CONST_IMG_HALF_HEIGHT);
                do Float316.div(v, v, CONST_IMG_HEIGHT);
                do v.swapSign();
                
                // let's do this...
                do CalcPixel.calcPixelValue(pixelValue, u, v);
                
                // if value > 1.0, value = 1.0
                if ( pixelValue.gt(CONST_ONE) ) {
                    do pixelValue.set(0, 127, 8192);  // 1.0
                // if value < 0.0, value = 0.0
                } else {
                    if (pixelValue.s() = 1) {
                        do pixelValue.set(0, 0, 0);  // 0.0
                    }
                }
                
                // Ordered dithering
                do Float316.add(pixelValue, pixelValue,
                                Dither.at( (yIntMod8 * 8) + xIntMod8 ));
                
                // draw that pixel
                if ( pixelValue.gt(CONST_HALF) ) {
                    do Screen.setColor(false);  // white pixel
                } else {
                    do Screen.setColor(true);  // black pixel
                }
                do Screen.drawPixel(xInt, yInt);
                
                // increment x related variables
                do Float316.add(x, x, CONST_ONE);
                let xInt = xInt + 1;
                let xIntMod8 = xIntMod8 + 1;
                if (xIntMod8 > 7) {
                    let xIntMod8 = 0;
                }
            }
            
            // increment y related variables
            do Float316.add(y, y, CONST_ONE);
            let yInt = yInt + 1;
            let yIntMod8 = yIntMod8 + 1;
            if (yIntMod8 > 7) {
                let yIntMod8 = 0;
            }
        }
        
        return;
    }
}
