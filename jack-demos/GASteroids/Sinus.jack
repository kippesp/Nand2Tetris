/**
 * Sinus static class provides sine table and getter functions.
 *
 * Must be initialised through init() before first use.
 *
 * Copyright 2013-2016 Gavin Stewart.
 *
 * You are required to give attribution to the author (Gavin Stewart) for any
 * use of this program (GPLv3 Section 7b).
 *
 * Trying to pass off my code as your own in your Elements of Computing classes
 * will result in a cursed life of forever buggy software.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class Sinus {
    static Array table;
    static boolean initialised;

    /**
     * Initialise the sinus table.
     */
    function void init () {
        var int i;

        // Static table table only initialised once.
        if (initialised) {
            return;
        }

        let table = Array.new(360);

        // Index in degrees (0 to 359 inclusive).
        // Output is two decimal places fixed point (* 100)
        //     => sin(degrees) * 100

        // First 90 degrees generated by script: generate_sinus.py
        let table[0] = 0;
        let table[1] = 2;
        let table[2] = 3;
        let table[3] = 5;
        let table[4] = 7;
        let table[5] = 9;
        let table[6] = 10;
        let table[7] = 12;
        let table[8] = 14;
        let table[9] = 16;
        let table[10] = 17;
        let table[11] = 19;
        let table[12] = 21;
        let table[13] = 22;
        let table[14] = 24;
        let table[15] = 26;
        let table[16] = 28;
        let table[17] = 29;
        let table[18] = 31;
        let table[19] = 33;
        let table[20] = 34;
        let table[21] = 36;
        let table[22] = 37;
        let table[23] = 39;
        let table[24] = 41;
        let table[25] = 42;
        let table[26] = 44;
        let table[27] = 45;
        let table[28] = 47;
        let table[29] = 48;
        let table[30] = 50;
        let table[31] = 52;
        let table[32] = 53;
        let table[33] = 54;
        let table[34] = 56;
        let table[35] = 57;
        let table[36] = 59;
        let table[37] = 60;
        let table[38] = 62;
        let table[39] = 63;
        let table[40] = 64;
        let table[41] = 66;
        let table[42] = 67;
        let table[43] = 68;
        let table[44] = 69;
        let table[45] = 71;
        let table[46] = 72;
        let table[47] = 73;
        let table[48] = 74;
        let table[49] = 75;
        let table[50] = 77;
        let table[51] = 78;
        let table[52] = 79;
        let table[53] = 80;
        let table[54] = 81;
        let table[55] = 82;
        let table[56] = 83;
        let table[57] = 84;
        let table[58] = 85;
        let table[59] = 86;
        let table[60] = 87;
        let table[61] = 87;
        let table[62] = 88;
        let table[63] = 89;
        let table[64] = 90;
        let table[65] = 91;
        let table[66] = 91;
        let table[67] = 92;
        let table[68] = 93;
        let table[69] = 93;
        let table[70] = 94;
        let table[71] = 95;
        let table[72] = 95;
        let table[73] = 96;
        let table[74] = 96;
        let table[75] = 97;
        let table[76] = 97;
        let table[77] = 97;
        let table[78] = 98;
        let table[79] = 98;
        let table[80] = 98;
        let table[81] = 99;
        let table[82] = 99;
        let table[83] = 99;
        let table[84] = 99;
        let table[85] = 100;
        let table[86] = 100;
        let table[87] = 100;
        let table[88] = 100;
        let table[89] = 100;
        let table[90] = 100;

        // Generate remaining three quadrants from existing data.

        let i = 91;
        while (i < 181) {
            let table[i] = table[180 - i];
            let i = i + 1;
        }

        // Note: i == 181
        while (i < 271) {
            let table[i] = -(table[i - 180]);
            let i = i + 1;
        }

        // Note: i == 271
        while (i < 359) {
            let table[i] = -(table[360 - i]);
            let i = i + 1;
        }

        let initialised = true;

        return;
    }

    /**
     * Return the sinus table.
     */
    function Array getTable () {
        return(table);
    }

    /**
     * Return sin(A) * 100
     *
     * Where 0 <= A < 360
     */
    function int sin (int A) {
        return(table[A]);
    }

    /**
     * Return cos(A) * 100
     *
     * Where 0 <= A < 360
     */
    function int cos (int A) {
        let A = A + 90;   // Cos is sin + 90 degrees.
        if (A > 359) {    // Ensure A is < 360
            let A = A - 360;
        }
        return(table[A]);
    }

}
